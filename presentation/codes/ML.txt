from sklearn import preprocessing

# scaling database
# input 
xScaler = preprocessing.MinMaxScaler()
xModel = xScaler.fit(x)
xNorm = xModel.transform(x)

# output
yScaler = preprocessing.MinMaxScaler()
yModel = yScaler.fit(y)
yNorm = yModel.transform(y)

from sklearn                          import model_selection
from sklearn.gaussian_process         import GaussianProcessRegressor
from sklearn.gaussian_process.kernels import RBF

# splitting data into test and train data
xTrainNorm, xTestNorm, yTrainNorm, yTestNorm = model_selection.train_test_split(xNorm, yNorm, test_size=0.30, random_state=42)

# kernel setup 
kernel = RBF(length_scale=0.1)

# geometry function object optimization
geometryFunc = GaussianProcessRegressor(kernel=kernel, random_state=0).fit(xTrainNorm, yTrainNorm)

from sklearn.metrics import mean_squared_error

# evaluating geometry function over test data 
yPred = geometryFunc.predict(xTestNorm)

# computing RMSE
RMSE = mean_squared_error(y_true=yTestNorm, y_pred=yPred)

# computing SCORE 
SCORE = geometryFunc.score(xTestNorm, yTestNorm)

print('RMSE = {0:.2E}'.format(RMSE))   # RMSE  = 9.11E-04
print('SCORE = {0:.2E}'.format(SCORE)) # SCORE = 9.75E-01